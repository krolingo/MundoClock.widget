export const command = `date -u +%H:%M`;


export const refreshFrequency = 60000; // Refresh every minute

// Path to the local JSON file generated by the Python script
const JSON_PATH = "MundoClock.widget/epic_images_index.json";

// Store fetched images globally
let images = [];

// Fetch the JSON file with the image list
const loadImages = () => {
  fetch(JSON_PATH)
    .then((response) => response.json())
    .then((data) => {
      images = data;
      console.log("Images Loaded:", images); // Debugging: Log loaded images
    })
    .catch((error) => {
      console.error("Error fetching image list:", error);
    });
};
loadImages();

export const render = ({ output }) => {
  
  // Parse the current UTC time (HH:MM)
  const currentTime = output.trim(); // Expect format: HH:MM

  // Debugging: Log the raw command output and parsed UTC time
  console.log("Raw Command Output:", output);
  console.log("Parsed Current UTC Time (HH:MM):", currentTime);

  // Ensure images are available
  if (images.length === 0) {
    return (
      <div style={{ color: "white", textAlign: "center", paddingTop: "20px" }}>
        Loading images or running the Python script...
      </div>
    );
  }

// Find the image closest to the current HH:MM time
let closestImage = null;
let smallestDiff = Infinity;

images.forEach((image) => {
  // Extract the time part (HH:MM) from the image timestamp
  const imageTime = image.timestamp.split(" ")[1].slice(0, 5); // Format: HH:MM

  // Calculate the difference in minutes
  const [currentHours, currentMinutes] = currentTime.split(":").map(Number);
  const [imageHours, imageMinutes] = imageTime.split(":").map(Number);

  const currentTotalMinutes = currentHours * 60 + currentMinutes;
  const imageTotalMinutes = imageHours * 60 + imageMinutes;

  const diff = Math.abs(currentTotalMinutes - imageTotalMinutes);

  if (diff < smallestDiff) {
    smallestDiff = diff;
    closestImage = image;
  }
});

// Debugging: Log the selected image and its timestamp
console.log("Selected Image Path:", closestImage?.path);
console.log("Selected Image Timestamp:", closestImage?.timestamp);

// Handle case where no closest image is found
if (!closestImage) {
  return (
    <div style={{ color: "white", textAlign: "center", paddingTop: "20px" }}>
      No images available.
    </div>
  );
}

return (
  <div>
    {/* Earth Image Container */}
    <div
      id="epic-earth"
      style={{
        position: "absolute",
        top: "50px",
        left: "535px",
        background: "black",
        borderRadius: "50%",
        width: "300px",
        height: "300px",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        overflow: "hidden",
        boxShadow: "0 4px 10px rgba(0, 0, 0, 0.3)",
        background: "rgba(0, 0, 0, 0.2)",
      }}
    >
      <img
        id="earth-image"
        src={closestImage.path}
        alt="EPIC Earth Image"
        style={{
          width: "126%",
          height: "126%",
          objectFit: "cover",
          objectPosition: "center",
        }}
      />
    </div>

    {/* Metadata Container */}
    <div
      id="epic-earth-metadata"
      style={{
        position: "absolute",
        top: "355px",
        left: "570px",
        color: "white",
        textAlign: "center",
        fontSize: "11px",
        lineHeight: "1.5",
        width: "210px",
        fontFamily: "Iosevka, SF Pro, Arial, sans-serif",
        textShadow: "2px 2px 2px rgba(0, 0, 0, 0.5)",
        background: "rgba(0, 0, 0, 0.3)",
        boxShadow: "0 4px 10px rgba(0, 0, 0, 0.5)",
        borderRadius: "5px",
        padding: "5px",

      }}
    >
      <div
        style={{
          fontSize: "18px",
          fontFamily: "Iosevka, SF Pro, Arial, sans-serif",
          fontWeight: "400",
          marginBottom: "-2px",
        }}
      >
        EPIC Earth Image
      </div>
      <div
        style={{
          fontSize: "10px",
          fontWeight: "400",
          marginTop: "0px",
          marginBottom: "0px",
        }}
      >
        <strong>Taken on:</strong> {closestImage.timestamp}
      </div>
      <div
        style={{
          fontSize: "10px",
          fontWeight: "400",
          fontStyle: "italic",
          marginBottom: "0px",
          
        }}
      >
        Closest to Current Time: {currentTime}
      </div>
    </div>
  </div>
);
};